/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dpozinen

import dpozinen.io.Input
import dpozinen.io.Reader
import dpozinen.logic.Solver
import org.junit.jupiter.api.assertAll
import java.io.File
import kotlin.test.Test
import kotlin.test.assertTrue

class ExpertTest {
	@Test
	fun custom() {
		val lines = """
        A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A+A=>C =A
	    """.trimIndent().split("\n")
		val input = Reader(emptyArray()).read(lines)
		solve(input)
	}

	@Test
	fun bad() {
		val list: List<() -> Unit> = getFiles(Regex("bad_files")).first()
				.walk()
				.filter { !it.isDirectory }
				.map { solve(it) }
				.map { { assertTrue(it.hasException(), "Exception on Input $it") } }
				.toList()
		assertAll(list)
	}

	@Test
	fun and() {
		getFiles(Regex(".*and.*")).filter { !it.isDirectory }.forEach { solve(it) }
	}

	private fun getFiles(regex: Regex, path: String = "C:\\Users\\Dariy\\Documents\\Code\\expert-system\\src\\test\\resources\\"): List<File> {
		return File(path).walk().filter { it.name.matches(regex) }.toList()
	}

	private fun solve(file: File): Input {
		print("Solving %s%n".format(file.absolutePath))
		val input = Reader(arrayOf(file.absolutePath)).read()
		solve(input)
		print("----------------------\n\n")
		return input
	}

	private fun solve(input: Input): Input {
		if (input.hasException())
			System.err.println(input.ex!!.message)
		else
			Solver().solve(input).forEach { print(it) }
		return input
	}
}
