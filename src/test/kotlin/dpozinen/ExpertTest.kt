/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dpozinen

import com.xenomachina.argparser.ArgParser
import dpozinen.io.Args
import dpozinen.io.Input
import dpozinen.io.Reader
import dpozinen.logic.Solver
import org.junit.jupiter.api.assertAll
import java.io.File
import java.nio.file.Paths
import kotlin.test.Test
import kotlin.test.assertTrue

class ExpertTest {

	private val args: Args = ArgParser(arrayOf("-t", "-q")).parseInto(::Args)

	@Test
	fun custom() {
		val lines = """
		'Sasha sucks dicks' => 'Sasha is gay'

        ='Sasha sucks dicks'
        ?'Sasha is gay'
	    """.trimIndent().split("\n")
		val input = Reader(args).read(lines)
		solve(input)
	}

	@Test
	fun bad() {
		val list: List<() -> Unit> = getFiles(Regex("bad_files"))
				.map { solve(it) }
				.map { { assertTrue(it.hasException(), "No Exception on Input $it") } }
				.toList()
		assertAll(list)
	}

	@Test
	fun and() {
		getFiles(Regex(".*and_subject2.*")).forEach { solve(it) }
	}

	private val pathToResources = Paths.get("").toAbsolutePath().toString() + "\\src\\test\\resources\\"
	private fun getFiles(regex: Regex, path: String = pathToResources): List<String> {
		return File(path).walk().filter { it.name.matches(regex) }
				.flatMap { f -> f.walk().asSequence() }
				.filter { it.isFile }
				.map { it.absolutePath }
				.distinct()
				.toList()
	}

	private fun solve(file: String): Input {
		print("Solving %s%n".format(file))
		val input = Reader(args, file).read()
		solve(input)
		print("----------------------\n\n")
		return input
	}

	private fun solve(input: Input): Input {
		if (input.hasException())
			System.err.println(input.ex!!.message)
		else
			Solver().solve(input).forEach { print(it) }
		return input
	}
}
